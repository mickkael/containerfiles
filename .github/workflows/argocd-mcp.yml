# Create and publish a Container image

on:
  workflow_dispatch:
    # inputs:
    #   version:
    #     description: 'version'
    #     required: true
    #     default: '2.1.1'
  schedule: 
    - cron: '2 2 * * 0' # Every Sunday 2am

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Image name
        id: image_name
        run: |
          FILENAME="${{ github.workflow }}"
          echo "name=$(basename -- ${FILENAME%.yml})" >> "$GITHUB_OUTPUT"

      - name: Get latest release version
        id: get_version
        run: |
          VERSION=$(curl -s https://api.github.com/repos/akuity/argocd-mcp/releases/latest | jq -r .tag_name)
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.actor }}/${{ steps.image_name.outputs.name }}
          tags: |
            type=raw,value=${{ steps.get_version.outputs.version }}
            type=raw,value=latest
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ steps.image_name.outputs.name }}
          file: ./${{ steps.image_name.outputs.name }}/Containerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_VERSION=${{ steps.get_version.outputs.version }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
